source("forecastworkload.r",echo=T)
write(arimaScaleupPrediction,"data")
write.csv(as.data.frame(arimaScaleupPrediction),"data")
dataframe(arimaScaleupPrediction[1:testsamples],workload$posxtime[trainsamples+1:workloadsize])
data.frame(arimaScaleupPrediction[1:testsamples],workload$posxtime[trainsamples+1:workloadsize])
data.frame(workload$UnixTimeStamp[trainsamples+1:workloadsize],arimaScaleupPrediction[1:testsamples])
length(workload$UnixTimeStamp[trainsamples+1:workloadsize])
length(workload$UnixTimeStamp[2500:workloadsize])
length(workload$UnixTimeStamp[2549:workloadsize])
length(workload$UnixTimeStamp[2501:workloadsize])
trainsamples
workloadsize
length(workload$UnixTimeStamp[trainsamples+1:workloadsize])
length(workload$UnixTimeStamp[2500:5000])
length(workload$UnixTimeStamp[2501:5000])
data.frame(workload$UnixTimeStamp[2501:workloadsize],arimaScaleupPrediction[1:testsamples])
data.frame(workload$UnixTimeStamp[2501:5000],arimaScaleupPrediction[1:2500])
dataforfile=data.frame(workload$UnixTimeStamp[2501:5000],arimaScaleupPrediction[1:2500])
write.csv(dataforfile,"data")
plot(workload$ActiveSessions[2501:5000])
plot(workload_tsdata[2501:5000])
lines(predicted_scaleup)
lines(predicted_scaleup,col="red")
source("forecastworkload.r")
source("forecastworkload.r",echo=T)
source("forecastworkload.r",echo=T)
length(arimaScaledownPrediction)
predicted_scaledown=zoo(arimaScaledownPrediction,workload$posxtime[trainsamples+1,workloadsize]);
predicted_scaledown=zoo(arimaScaledownPrediction,workload$posxtime[2501,5000]);
predicted_scaledown=zoo(arimaScaledownPrediction[1:testsamples],workload$posxtime[trainsamples+1,workloadsize]);
predicted_scaledown=zoo(arimaScaledownPrediction[1:testsamples],workload$posxtime[trainsamples+1:workloadsize]);
forecastedscaledown=data.frame(workload$UnixTimeStamp[2501:5000],arimaScaleupPrediction[1:2500])
write.csv(forecastedscaledown,FORECAST_SCALEUP_WORKLOAD)
write.csv(forecastedscaledown,FORECAST_SCALEDOWN_WORKLOAD)
source("forecastworkload.r")
source("forecastworkload.r",echo=T)
source("forecastworkload.r",echo=T)
plot(workload_tsdata[2501:5000])
lines(predicted_scaleup,col="red")
lines(predicted_scaledown,col="blue")
max(predicted_scaleup)
max(predicted_scaledown)
max(workload$ActiveSessions)
max(workload$ActiveSessions[2501:5000])
plot(workload$ActiveSessions[2501:5000])
source("simulation_graphs.r")
source("simulation_graphs.r")
source("simulation_graphs.r")
source("simulation_graphs.r")
source("simulation_graphs.r",verbose=1)
length(sim_log)
sim_log
sim_log[1,]
sim_log[2,]
source("simulation_graphs.r",verbose=1)
zoo(sim_log$ActiveSessions,sim_log$StampToPosxTime)
sim_log$ActiveSessions
zoo(sim_log$ActiveSessions,sim_log$StampToPosxTime)
sim_log$StampToPosxTime
as.POSIXct(sim_log$UnixTimeStamp, origin="1970-01-01")
source("simulation_graphs.r",verbose=1)
plot(tsdata.capacity)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
seq(1,2500,180)
i=seq(1,2500,180)
i
i[1]
i[2]
i+1
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
source("simulation_graphs.r",verbose=1)
remove.packages("vimcom")
forecastdata_scaleup
source("cost_graphs.r")
cost_log
table(cost_log)
barplot(table(cost_log))
table(cost_log$baseline)
table(cost_log$odicost)
length(cost_log)
matrix(cost_log)
matrix(cost_log,6,6)
cost_log
barplot(cost_log[1,])
barplot(cost_log[,1])
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
barplot(cost_log[,1])
cost_log[,1]
cost_log[1,]
barplot(cost_log[1,])
table(cost_log[1,])
barplot(table(cost_log[1,]))
mat = as.matrix(cost_log[-1])
rownames(mat) <- cost_log[,1]
barplot(mat)
barplot(mat,beside=T)
mat
mat = as.matrix(cost_log[-1])
mat
mat = as.matrix(cost_log)
mat
rownames = c("opt1","opt2","opt3","opt4","opt5","opt6","opt7")
rownames(mat) = c("opt1","opt2","opt3","opt4","opt5","opt6","opt7")
mat
barplot(mat,beside=T)
t(mat)
barplot(t(mat),beside=T)
barplot(t(mat),main="Cost of each option to reserve instance",beside=T)
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in $",beside=T)
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:7),beside=T)
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T)
mat
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T)
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=rownames(mat))
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=colnames(mat))
t(mat)
?text
source("cost_graphs.r")
?pdf
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
?text
dev.off()
dev.off()
dev.off()
dev.off()
barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=colnames(mat))
bp=barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=colnames(mat))
text(bp,y=tmat[1,])
text(bp,y=tmat[1,],cex=1)
bp=barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=colnames(mat))
text(bp,y=tmat[1,],cex=1)
text(bp,cex=1,pos=3)
bp=barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=colnames(mat))
text(bp,cex=1,pos=3)
bp=barplot(t(mat),main="Cost of each option to reserve instance",xlab="Options", ylab="Cost in USD",col=c(1:6),beside=T,legend=colnames(mat))
text(bp,0,cex=1,pos=3)
?text
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
?text
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
?text
?text
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
source("cost_graphs.r")
?barplot
source("cost_graphs.r")
source("cost_graphs.r")
source("forecastworkload.r")
?sink
source("forecastworkload.r")
source("forecastworkload_graph.r")
source("forecastworkload_graph.r",verbose=1)
scale_up_workload$PosxTime= as.POSIXct(scale_up_workload$UnixTimeStamp, origin="1970-01-01");
scale_up_workload$UnixTimeStamp
scale_up_workload$UnixTimeStamp * 1000
scale_up_workload$UnixTimeStamp / 1000
scale_up_workload$UnixTimeStamp[1,]
scale_up_workload$UnixTimeStamp[,1]
scale_up_workload$UnixTimeStamp
scale_up_workload$PosxTime= as.POSIXct(scale_up_workload$UnixTimeStamp, origin="1970-01-01");
scale_up_workload[1,]
scale_up_workload[2,]
scale_up_workload[3,]
source("forecastworkload_graph.r")
source("forecastworkload_graph.r")
source("forecastworkload_graph.r")
source("forecastworkload_graph.r")
source("forecastworkload_graph.r")
scale_down_workload
source("forecastworkload_graph.r")
source("forecastworkload_graph.r")
?write.csv
?capture.output
source("forecastworkload_graph.r")
source("forecastworkload.r")
source("forecastworkload.r")
source("forecastworkload.r")
sink()
sink()
source("forecastworkload.r")
source("forecastworkload.r")
auto.arima(tsdata.actual)
plot(tsdata.actual)
dev.off()
dev.off()
plot(tsdata.actual)
auto.arima(tsdata.actual)
plot(auto.arima(tsdata.actual))
fit=auto.arima(tsdata.actual)
diag(fit)
tsdiag(fit)
Box.test(fit$residuals,lag=1)
